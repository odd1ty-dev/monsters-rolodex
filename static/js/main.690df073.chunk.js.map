{"version":3,"sources":["Components/Card/card.component.jsx","Components/Card-List/card-list.component.jsx","Components/Search-Box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAEaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,6BAAKL,EAAMI,QAAQE,YCJdC,EAAS,SAACP,GAAD,OAClB,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,UCJnBK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBACGX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDAvCb,aAAc,IAAD,8BACX,gBAgBFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAGd,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBART,E,gEAWO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAG,EAAKV,SAAS,CAACT,SAASmB,S,+BAO/B,IAAD,EACuBC,KAAKP,MAA3Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVW,EAAmBrB,EAASsB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASd,EAAYa,kBAEpD,OACI,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,KAAd,8BACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAlCZI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.690df073.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = (props) =>(\r\n    <div className='card-container'>\r\n        <img \r\n        alt='monster' \r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../Card/card.component.jsx'\r\n\r\nexport const CardList=(props)=>(\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster =>(\r\n            <Card key= {monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);\r\n","import React from'react';\r\nimport'./search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n     <input\r\n        className='search' \r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n        />\r\n)\r\n\r\n/*\r\nFunctional Components don't have access to state\r\nbecause youre not always going to USE any of these. \r\n\r\nSometimes you just want to render HTML. Thats why,\r\nwe have functional components.\r\n*/ ","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './Components/Card-List/card-list.component';\nimport {SearchBox} from './Components/Search-Box/search-box.component';\nclass App extends Component{\n  constructor(){\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField:''\n    }; \n    \n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users =>this.setState({monsters:users}))\n  }\n\n  handleChange=(e)=>{\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const {monsters,searchField}=this.state;\n    const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return(\n        <div className=\"App\">\n          <h1 className='Bi'>Monsters Rolodex</h1>\n          <SearchBox \n            placeholder='search monsters' \n            handleChange={this.handleChange}/>\n            \n          <CardList monsters={filteredMonsters}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n/*Notes:\nCLASS components have access to the STATE through the constructor method, and can pass it down as PROPS,\nto components in it. It also has access to life-cycle methods,\nwhich allow you to control some actions that happend before, after, and during the\napplications execution. \n\n\nSomething to consider when deciding if you want to \ngive a component state or not is:\n  \"Who needs the information?\" and \"How are they going to get it?\"\nState is an property you inherit from the COMPONENT object, but its information is\nnot global. This means that information placed in it can only go from it to any component below it.\nThis is called \"ONE WAY DATAFLOW\"\n\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}